---
title: "Guided Simulation"
author: Matthew Mcnear, Haowen Wu, Meijie Yue
format: html
---
1.Introduction about this document
This document is created in order to provides step-by-step guidance on how to download and use the ensembleR package from GitHub

2.Preparation for devtools package in R
Before install ensembleR, please insure you have installed "devtools" in R:

```{r}

# install required packages, if necessary
# install.packages("devtools")
# devtools::install_github("mcanearm/ensembleR", subdir="ensembleR")
library(devtools)
library(ensembleR)
```
3.Download the ensembleR zip and library the package

If no error occurs, the package is successfully installed.

4.We're going to go through a simple guided test for regression examples. Let's use the abalone dataset.

## 4.1 List Available Functions
After loading the package, you can list all available functions using:

```{r}
ls("package:ensembleR")
```

Expected output:

```
[1] "abalone"                         "bootLM"                          "fit_char_encoder"               
[4] "fit_models"                      "fitAggregationFunction"          "fitAggregationFunction_bootLM"  
[7] "fitAggregationFunction_EM"       "fitAggregationFunction_lm"       "fitAggregationFunction_quantile"
[10] "rmse"
```

## 4.2 Example:Using the `abalone` dataset

The package includes the `abalone` dataset for reference.

```{r}
# Load the dataset
data(abalone)
str(abalone)
# Summarize the data
summary(abalone)
```

```
Expected output:
> str(abalone)
'data.frame':	4177 obs. of  9 variables:
 $ Sex             : chr  "M" "M" "F" "M" ...
 $ Length          : num  0.455 0.35 0.53 0.44 0.33 0.425 0.53 0.545 0.475 0.55 ...
 $ Diameter        : num  0.365 0.265 0.42 0.365 0.255 0.3 0.415 0.425 0.37 0.44 ...
 $ Height          : num  0.095 0.09 0.135 0.125 0.08 0.095 0.15 0.125 0.125 0.15 ...
 $ whole_weight_g  : num  0.514 0.226 0.677 0.516 0.205 ...
 $ shucked_weight_g: num  0.2245 0.0995 0.2565 0.2155 0.0895 ...
 $ viscera_weight_g: num  0.101 0.0485 0.1415 0.114 0.0395 ...
 $ shell_weight_g  : num  0.15 0.07 0.21 0.155 0.055 0.12 0.33 0.26 0.165 0.32 ...
 $ Rings           : int  15 7 9 10 7 8 20 16 9 19 ...
> summary(abalone)
     Sex                Length         Diameter          Height       whole_weight_g   shucked_weight_g viscera_weight_g
 Length:4177        Min.   :0.075   Min.   :0.0550   Min.   :0.0000   Min.   :0.0020   Min.   :0.0010   Min.   :0.0005  
 Class :character   1st Qu.:0.450   1st Qu.:0.3500   1st Qu.:0.1150   1st Qu.:0.4415   1st Qu.:0.1860   1st Qu.:0.0935  
 Mode  :character   Median :0.545   Median :0.4250   Median :0.1400   Median :0.7995   Median :0.3360   Median :0.1710  
                    Mean   :0.524   Mean   :0.4079   Mean   :0.1395   Mean   :0.8287   Mean   :0.3594   Mean   :0.1806  
                    3rd Qu.:0.615   3rd Qu.:0.4800   3rd Qu.:0.1650   3rd Qu.:1.1530   3rd Qu.:0.5020   3rd Qu.:0.2530  
                    Max.   :0.815   Max.   :0.6500   Max.   :1.1300   Max.   :2.8255   Max.   :1.4880   Max.   :0.7600  
 shell_weight_g       Rings       
 Min.   :0.0015   Min.   : 1.000  
 1st Qu.:0.1300   1st Qu.: 8.000  
 Median :0.2340   Median : 9.000  
 Mean   :0.2388   Mean   : 9.934  
 3rd Qu.:0.3290   3rd Qu.:11.000  
 Max.   :1.0050   Max.   :29.000  
 ```

## 4.3 Sample usageï¼Œ difference between fitting models with aggregation and without aggregation(Simple Mean Example)

# Load Abalone Dataset
```{r}
data(abalone, package="ensembleR")
abalone$Age <- abalone$Rings + 1.5
abalone$Rings <- NULL
```
# Split Data as Training, Validation, and Test Sets
```{r}
set.seed(123) 
train_idx <- sample(1:nrow(abalone), 0.8 * nrow(abalone))
test_set_idx <- setdiff(1:nrow(abalone), train_idx)
val_set_idx <- sample(train_idx, 0.2 * length(train_idx))
train_idx <- setdiff(train_idx, val_set_idx)

train_df <- abalone[train_idx, ]
val_df <- abalone[val_set_idx, ]
test_df <- abalone[test_set_idx, ]

train_Y <- train_df$Age
train_X <- train_df[, -which(names(train_df) == "Age")]

val_X <- val_df[, -which(names(val_df) == "Age")]
val_Y <- val_df$Age

test_X <- test_df[, -which(names(test_df) == "Age")]
test_Y <- test_df$Age
```
# Fit Models with Aggregation
```{r}
modelEnsemble <- fit_models(train_X, train_Y, validation_pct = 0.01)
y_hats <- predict(modelEnsemble, val_X)
aggregator <- fitAggregationFunction(val_Y, y_hats, method = "bootLM")
```

# Predict Using the Ensemble on Test Data
```{r}
test_y_hats <- predict(modelEnsemble, test_X)
out <- predict(aggregator, test_y_hats, alpha = 0.05)
```

# Evaluate the Model
```{r}
coverage <- mean(out[, "lower"] <= test_Y & out[, "upper"] >= test_Y)
interval_length <- mean(out[, "upper"] - out[, "lower"])
rmse_val <- rmse(test_Y, out[, "mean"])

cat("Evaluation Metrics:\n")
cat(sprintf("RMSE: %.3f\n", rmse_val))
cat(sprintf("Coverage: %.3f\n", coverage))
cat(sprintf("Interval Length: %.3f\n", interval_length))
```
Expected output:
```
Evaluation Metrics:
RMSE: 2.111
Coverage: 0.945
Interval Length: 8.406
```

# Fit Models Without Aggregation (Simple Mean Example)
```{r}
simple_mean <- rowMeans(test_y_hats)
simple_mean_sd <- sd(val_Y - rowMeans(y_hats))

coverage_simple <- mean(simple_mean - 1.96 * simple_mean_sd <= test_Y &
                        simple_mean + 1.96 * simple_mean_sd >= test_Y)
interval_length_simple <- mean(2 * 1.96 * simple_mean_sd)
rmse_simple <- rmse(test_Y, simple_mean)

cat("\nSimple Mean Evaluation Metrics:\n")
cat(sprintf("RMSE: %.3f\n", rmse_simple))
cat(sprintf("Coverage: %.3f\n", coverage_simple))
cat(sprintf("Interval Length: %.3f\n", interval_length_simple))
```
Expected output:
```
Simple Mean Evaluation Metrics:
RMSE: 2.099
Coverage: 0.940
Interval Length: 8.444
```



